{"version":3,"sources":["assets/gameOver.mp3","assets/point.wav","assets/hit.wav","initializer.js","App.js","useInterval.js","serviceWorker.js","index.js"],"names":["module","exports","mapSize","snakeSpawnPos","Math","floor","random","push","map","pos","i","apple","appleSpawnPos","compass","38","40","37","39","87","65","83","68","gameOverSound","UIfx","gameOver","pointSound","point","hitSound","hit","App","canvasRef","useRef","useState","modalOpen","setModalOpen","gameOverModal","setGameOverModal","snake","setSnake","setApple","momentum","setMomentum","syncMomentum","setSyncMomentum","snakeSpeed","setSnakeSpeed","setGameOver","useEffect","current","getContext","setTransform","startGame","newSnake","newApple","wrapAdjust","value","index","spawnApple","_","checkCollision","head","snek","segment","gameOn","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","play","checkAppleCollision","pop","context","clearRect","fillStyle","fillRect","forEach","x","y","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","element","document","getElementById","className","role","tabIndex","onKeyDown","event","keyCode","newMomentum","abs","move","overlayClassName","isOpen","onRequestClose","onClick","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","ref","width","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f2a6f2a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gameOver.fd611149.mp3\";","module.exports = __webpack_public_path__ + \"static/media/point.55128ad6.wav\";","module.exports = __webpack_public_path__ + \"static/media/hit.f499fc89.wav\";","const mapSize = [800, 800];\r\nconst mapScale = 25;\r\nconst snakeSpawnPos = [\r\n\t[\r\n\t\tMath.floor((Math.random() * mapSize[0]) / mapScale),\r\n\t\tMath.floor((Math.random() * mapSize[1]) / mapScale),\r\n\t],\r\n];\r\nsnakeSpawnPos.push(snakeSpawnPos[0].map((pos, i) => (i === 1 ? pos + 1 : pos)));\r\nlet apple = [\r\n\tMath.floor((Math.random() * mapSize[0]) / mapScale),\r\n\tMath.floor((Math.random() * mapSize[1]) / mapScale),\r\n];\r\nwhile (apple in snakeSpawnPos)\r\n\tapple = [\r\n\t\tMath.floor((Math.random() * mapSize[0]) / mapScale),\r\n\t\tMath.floor((Math.random() * mapSize[1]) / mapScale),\r\n\t];\r\nconst appleSpawnPos = apple;\r\nconst speed = 100;\r\nconst compass = {\r\n\t38: [0, -1], // up arrow\r\n\t40: [0, 1], // down arrow\r\n\t37: [-1, 0], // left arrow\r\n\t39: [1, 0], // right arrow\r\n\t87: [0, -1], // up (W)\r\n\t65: [-1, 0], // left (A)\r\n\t83: [0, 1], // down (S)\r\n\t68: [1, 0], // right (D)\r\n};\r\n\r\nexport { mapSize, snakeSpawnPos, appleSpawnPos, mapScale, speed, compass };\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport UIfx from 'uifx';\r\nimport gameOver from './assets/gameOver.mp3';\r\nimport point from './assets/point.wav';\r\nimport hit from './assets/hit.wav';\r\nimport Modal from 'react-modal';\r\nimport { useInterval } from './useInterval.js';\r\nimport {\r\n\tmapSize,\r\n\tsnakeSpawnPos,\r\n\tappleSpawnPos,\r\n\tmapScale,\r\n\tspeed,\r\n\tcompass,\r\n} from './initializer.js';\r\nimport './App.css';\r\n\r\nconst gameOverSound = new UIfx(gameOver);\r\nconst pointSound = new UIfx(point);\r\nconst hitSound = new UIfx(hit);\r\n\r\nconst App = () => {\r\n\tconst canvasRef = useRef();\r\n\tconst [modalOpen, setModalOpen] = useState(true);\r\n\tconst [gameOverModal, setGameOverModal] = useState(false);\r\n\tconst [snake, setSnake] = useState(snakeSpawnPos);\r\n\tconst [apple, setApple] = useState(appleSpawnPos);\r\n\tconst [momentum, setMomentum] = useState([0, -1]);\r\n\tconst [syncMomentum, setSyncMomentum] = useState([0, -1]);\r\n\tconst [snakeSpeed, setSnakeSpeed] = useState(null);\r\n\tconst [gameOver, setGameOver] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst context = canvasRef.current.getContext('2d');\r\n\t\tcontext.setTransform(mapScale, 0, 0, mapScale, 0, 0);\r\n\t});\r\n\r\n\tconst startGame = () => {\r\n\t\tlet newSnake = [\r\n\t\t\t[\r\n\t\t\t\tMath.floor((Math.random() * mapSize[0]) / mapScale),\r\n\t\t\t\tMath.floor((Math.random() * mapSize[1]) / mapScale),\r\n\t\t\t],\r\n\t\t];\r\n\t\tnewSnake.push(snakeSpawnPos[0].map((pos, i) => (i === 1 ? pos + 1 : pos)));\r\n\t\tsetSnake(newSnake);\r\n\t\tlet newApple = [\r\n\t\t\tMath.floor((Math.random() * mapSize[0]) / mapScale),\r\n\t\t\tMath.floor((Math.random() * mapSize[1]) / mapScale),\r\n\t\t];\r\n\t\twhile (newApple in snakeSpawnPos)\r\n\t\t\tnewApple = [\r\n\t\t\t\tMath.floor((Math.random() * mapSize[0]) / mapScale),\r\n\t\t\t\tMath.floor((Math.random() * mapSize[1]) / mapScale),\r\n\t\t\t];\r\n\t\tsetApple(newApple);\r\n\t\tsetMomentum([0, -1]);\r\n\t\tsetSnakeSpeed(speed);\r\n\t\tsetGameOver(false);\r\n\t};\r\n\r\n\tconst move = (keyCode) => {\r\n\t\tif (keyCode in compass) {\r\n\t\t\tconst newMomentum = compass[keyCode];\r\n\t\t\tif (\r\n\t\t\t\tnewMomentum.map(Math.abs)[0] !== momentum.map(Math.abs)[0] &&\r\n\t\t\t\tnewMomentum.map(Math.abs)[1] !== momentum.map(Math.abs)[1]\r\n\t\t\t)\r\n\t\t\t\tsetMomentum(newMomentum);\r\n\t\t} else if (keyCode === 13 || keyCode === 32) startGame();\r\n\t};\r\n\r\n\tconst endGame = () => {\r\n\t\tsetGameOverModal(true);\r\n\t\thitSound.play();\r\n\t\tgameOverSound.play();\r\n\t\tsetSnakeSpeed(null);\r\n\t\tsetGameOver(true);\r\n\t};\r\n\r\n\tconst wrapAdjust = (value, index) => {\r\n\t\tif (value >= mapSize[index] / mapScale) return 0;\r\n\t\telse if (value < 0) return mapSize[index] / mapScale - 1;\r\n\t\telse return value;\r\n\t};\r\n\r\n\tconst spawnApple = () =>\r\n\t\tapple.map((_, i) => Math.floor((Math.random() * mapSize[i]) / mapScale));\r\n\r\n\tconst checkCollision = (head, snek = snake) => {\r\n\t\tfor (const segment of snek) {\r\n\t\t\tif (head[0] === segment[0] && head[1] === segment[1]) return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tconst checkAppleCollision = (snek) => {\r\n\t\tif (snek[0][0] === apple[0] && snek[0][1] === apple[1]) {\r\n\t\t\tpointSound.play();\r\n\t\t\tlet newApple = spawnApple();\r\n\t\t\twhile (checkCollision(newApple, snek)) spawnApple();\r\n\t\t\tsetApple(newApple);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tconst gameOn = () => {\r\n\t\tsetSyncMomentum(momentum);\r\n\t\tconst snakeCopy = JSON.parse(JSON.stringify(snake));\r\n\t\tconst newSnakeHead = [\r\n\t\t\twrapAdjust(snakeCopy[0][0] + syncMomentum[0], 0),\r\n\t\t\twrapAdjust(snakeCopy[0][1] + syncMomentum[1], 1),\r\n\t\t];\r\n\t\tsnakeCopy.unshift(newSnakeHead);\r\n\t\tif (checkCollision(newSnakeHead)) endGame();\r\n\t\tif (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\r\n\t\tsetSnake(snakeCopy);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tconst context = canvasRef.current.getContext('2d');\r\n\t\tcontext.clearRect(0, 0, mapSize[0], mapSize[1]);\r\n\t\tcontext.fillStyle = '#ff353a';\r\n\t\tcontext.fillRect(apple[0], apple[1], 1, 1);\r\n\t\tcontext.fillStyle = '#00ff40';\r\n\t\tsnake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\r\n\t}, [snake, apple, gameOver]);\r\n\r\n\tuseInterval(() => gameOn(), snakeSpeed);\r\n\r\n\tconst element = document.getElementById('root');\r\n\r\n\tfunction openFullscreen() {\r\n\t\tif (element.requestFullscreen) {\r\n\t\t\telement.requestFullscreen();\r\n\t\t} else if (element.mozRequestFullScreen) {\r\n\t\t\telement.mozRequestFullScreen();\r\n\t\t} else if (element.webkitRequestFullscreen) {\r\n\t\t\telement.webkitRequestFullscreen();\r\n\t\t} else if (element.msRequestFullscreen) {\r\n\t\t\telement.msRequestFullscreen();\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName=\"keyCap\"\r\n\t\t\trole=\"button\"\r\n\t\t\ttabIndex=\"-1\"\r\n\t\t\tonKeyDown={(event) => move(event.keyCode)}\r\n\t\t>\r\n\t\t\t<Modal\r\n\t\t\t\tclassName=\"gameOverModal\"\r\n\t\t\t\toverlayClassName=\"modalOverlay\"\r\n\t\t\t\tisOpen={gameOverModal}\r\n\t\t\t\tonRequestClose={() => setGameOverModal(false)}\r\n\t\t\t>\r\n\t\t\t\t<h1 className=\"mainTitle\">Game Over!</h1>\r\n\t\t\t</Modal>\r\n\t\t\t<Modal\r\n\t\t\t\tclassName=\"modal\"\r\n\t\t\t\toverlayClassName=\"modalOverlay\"\r\n\t\t\t\tisOpen={modalOpen}\r\n\t\t\t\tonRequestClose={() => setModalOpen(false)}\r\n\t\t\t>\r\n\t\t\t\t<h2>Would you like to enable fullscreen?</h2>\r\n\t\t\t\t<p>(Recommended)</p>\r\n\t\t\t\t<button\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tsetModalOpen(false);\r\n\t\t\t\t\t\topenFullscreen();\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tOk\r\n\t\t\t\t</button>\r\n\t\t\t</Modal>\r\n\t\t\t<h1 className=\"mainTitle\">Classic Snake</h1>\r\n\t\t\t<canvas\r\n\t\t\t\tclassName=\"map\"\r\n\t\t\t\tref={canvasRef}\r\n\t\t\t\twidth={`${mapSize[0]}px`}\r\n\t\t\t\theight={`${mapSize[1]}px`}\r\n\t\t\t/>\r\n\t\t\t<button\r\n\t\t\t\tclassName={!snakeSpeed ? 'startButton' : 'restartButton'}\r\n\t\t\t\tonClick={startGame}\r\n\t\t\t>\r\n\t\t\t\t<span>{!snakeSpeed ? 'Start Game ' : 'Restart Game '}</span>\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","// Custom Hook by Dan Abramov\r\nimport { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}